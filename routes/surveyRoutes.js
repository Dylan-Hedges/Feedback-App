const mongoose = require('mongoose');
//Middleware that checks the user is logged in - we dont want users that are not logged in to be able to make surveys
const requireLogin = require('../middlewares/requireLogin');
const requireCredits = require('../middlewares/requireCredits');
const Mailer = require('../services/Mailer');
//Imports the template that produces the html body
const surveyTemplate = require('../services/emailTemplates/surveyTemplate.js');
//Imports the mongoose model class surveys - we can use this to create a new instance of a survey (not yet persisted in our MongoDB)
const Survey = mongoose.model('surveys');

module.exports = app => {
	//Route user is taken to after responding to survey
	app.get('/api/surveys/thanks', (req, res) => {
		res.send('Thanks for voting!');
	});

	//If a user tries to make a new survey (i.e for post requests that come into '/api/surveys') check the user is logged in (execute requireLogin middleware), check the user has enough credits (execute requireCredits middleware), execute callback/create survey, "req" = object that represents the incoming request (contains title, subject, body, recipients(array, "," seperated string of addresses)), creates a new instance of the survey using the model, "async" see "await"
	app.post('/api/surveys', requireLogin, requireCredits, async (req, res) => {
		const { title, subject, body, recipients } = req.body;
		//Creates a  new instance of the survey - title is a shortened version of title: title, we can do this because the Key and Value is the same, recipients - the boolean is set to false by default (not clicked) so doesnt need to be altered, recipients.spilt(',') spilts the string on the "," character, each indivial spilt is a specific email which is storred in an array, ".map()" takes the array of strings and creates a new array of objects (loops through the array of strings and executes a function for each element in the array), "(email => ({ email }))" short for "(email => { return { email: email}})" - for every email address return an object with the property email + the email, "req.user.id" - id generated by mongoose/mongo, "dateSent: Date.now()" - saves when the survey was sent
		const survey = new Survey({
			title,
			subject,
			body,
			recipients: recipients.split(',').map(email => ({ email: email.trim() })),
			_user: req.user.id,
			dateSent: Date.now()
		});

		//Creates a new Mailer instance - "(survey)" passes in an object that contains the "subject" and "recipients" properties, "surveyTemplate(survey)" content of the email (html) - calls the function inside of surveyTemplate.js and passes in the "survey" object/model (defined above), "new" - creates a new instance of a class,
		const mailer = new Mailer(survey, surveyTemplate(survey));

		//Catches any errors when sending mails, saving surveys, minus credits etc.
		try {
			//".send()" is an async function (we have to wait for API request inside of it to complete (i.e mailer sent to SendGrid) before we send the survey), "await" refers to "app.post()"
			await mailer.send();
			//Saves the survey to the DB (after sending to SendGate API), "await" - wait until the ".send();" request to the SendGrid API is complete before saving to the DB
			await survey.save();
			//Minus 1 credit from users account
			req.user.credits -= 1;
			//Save the updated user
			const user = await req.user.save();
			//Send back user model with updated number of credits
			res.send(user);
		} catch (err) {
			//Sends a response code with the error if any issues
			res.status(422).send(err);
		}
	});
};
